///$tab Change Log
/*
1.0.4 - 01/11/15
----------------
* Switched to using the Zendesk Incremental API (https://developer.zendesk.com/rest_api/docs/core/incremental_export#tickets) which is recommended 'To get a list of all tickets in your account' (see here - https://developer.zendesk.com/rest_api/docs/core/tickets#listing-tickets).
* Also switched to using the JsonToXmlRaw table which makes it easier to get all the data in a single request.
* Removed reference to an external credentials.txt file.
* Added a MonthYear dimension.
* Added variables to set load access token (for QVSource Web Edition) and app ID.

1.0.3 - 07/09/15
----------------
* Added empty QVDs folder.

1.0.2 - 14/05/14
----------------
* Added additional comments to credential section.
* Renamed some variables for clarity.
* Now caches API response for an hour (optional line to uncomment which will clear the cache).
* Moved QVSource URL into variable vRoot.

1.0.1 - 04/12/13
----------------
* Added badge.

1.0.0 - 09/10/13
----------------
* Initial Release
*/
///$tab Config
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='£#,##0.00;-£#,##0.00';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

//
// Note - as per the ZenDesk API:
// https://qvsource.zendesk.com/agent/#/admin/api
// This should be something like:
// user@domain.com/token
//
let vUserName = 'yourusername@yourdomain.com/token'; // DONT FORGET this should end with /token

//
// You must encrypt your API ket first in the connector - to do this,
// IN QVSOURce make a sample GET request e.g. to:
//
// https://{YOUR ZENDESK SUBDOMAIN}.zendesk.com/api/v2/tickets.json
//
// First seting the username to the above and the password to your API key at:
// https://{YOUR ZENDESK SUBDOMAIN}.zendesk.com/agent/#/admin/api
// 
// Then copy the encrypted password (i.e. the value of the PasswordEncrypted parameter 
// in the generated load URL) to here.
//
let vEncryptedAPIKey = '{READ NOTES ABOVE ABOUT HOW TO GET THIS}';

let vZenDeskDomain = '{YOUR ZENDESK SUBDOMAIN}';	

//
// Request QVSource to cache the response from the Zendesk API for this many hours.
// This will improve load times, particularly while you are making changes to the 
// application and going through and edit, reload, review cycle.
//
let vCacheTimeInHours = 1;

let vRoot = 'http://localhost:5555/QVSource/WebConnectorV2/';

// This could be &loadAccessToken=1a2b3c4d for QVSource web edition.
LET vLoadAccessToken = '';

// You can set this to your own app name.
LET vQVSourceAppId = 'Zendesk_App_For_Qlik';

// If you want to just debug with a couple of pages of data set this value.
set vMaxPages = -1;
///$tab Helper Functions
Sub urlEncode(str)
 
    let str=replace(str, '%', '%25'); // should be first
    let str=replace(str, '#', '%23');
    let str=replace(str, ' ', '%20');
    let str=replace(str, '$', '%24');
    let str=replace(str, '&', '%26');
    let str=replace(str, '+', '%2B');
    let str=replace(str, ',', '%2C');
    let str=replace(str, '/', '%2F');
    let str=replace(str, '\', '%5C');
    let str=replace(str, ':', '%3A');
    let str=replace(str, ';', '%3B');
    let str=replace(str, '=', '%3D');
    let str=replace(str, '?', '%3F');
    let str=replace(str, '@', '%40');
    let str=replace(str, '[', '%5B');
    let str=replace(str, ']', '%5D');
    let str=replace(str, '>', '%3E');
    let str=replace(str, '<', '%3C');
    let str=replace(str, chr(39), '%27');
     
    call=str;
         
End sub

sub clearZenDeskCache

	ClearCache:
	LOAD
	QVSource_ClearCache_Result,
	QVSource_ClearCache_SearchPattern,
	QVSource_ClearCache_NoItemsDeleted
	FROM
	[$(vRoot)?clearcache=true]
	(txt, utf8, embedded labels, delimiter is '\t', msq); 
	
end sub
///$tab Zendesk (Build List Of URLs)
let vCredentials = 'UserName=$(vUserName)&PasswordUnEncrypted=$(vEncryptedAPIKey)';

//
// Uncomment this if you wish to clear the cache manually.
// Otherwise results from ZenDesk will be cached for 
// vCacheTimeInHours hours.
//
// call clearZenDeskCache

// This will be the URL to the first page of results.
let vTicketsURL = 'https://$(vZenDeskDomain).zendesk.com/api/v2/incremental/tickets.json?start_time=0';
let vRowNumber = 1;

// We will create a table containing the URLs of all the pages of tickets
// and then  loop through this later to retrieve the actual tickets.
ZenDesk_TicketPages:
LOAD * INLINE [
ZenDesk_Tickets_page, ZenDesk_Tickets_url
1, '$(vTicketsURL)'
];

set errormode = 0;

do while (IsNull(vTicketsURL) = 0)

	let vTicketsURLToUse = 	vTicketsURL;	
	let vTicketsURL = '';
	
	ZenDesk_TicketPages:
	LOAD
		1 + $(vRowNumber) as ZenDesk_Tickets_page,
		#text as ZenDesk_Tickets_url
	FROM
	[$(vRoot)?table=JsonToTable&appID=&verb=GET&url=$(vTicketsURLToUse)&xpath=DATA%2fnext_page&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]
	(qvx);

	let vTicketsURL = peek('ZenDesk_Tickets_url', vRowNumber, 'ZenDesk_TicketPages');
	
	if(vTicketsURL = vPrevious) then
		exit do;
	endif
	
	let vPrevious = vTicketsURL;
	
	let vRowNumber = vRowNumber + 1;
	
	if(vMaxPages > -1 and vRowNumber > vMaxPages - 1) then 
		exit do;
	endif
			
loop

set errormode = 1;

DistinctURLs:
load distinct
ZenDesk_Tickets_url as PageOfResultsUrl
resident ZenDesk_TicketPages;

drop table ZenDesk_TicketPages;
///$tab Zendesk (Load Data)
//
// Now we have a table with the URL of each page of tickets 
// we can loop through this to get the actual tickets.
//
LET noRows = NoOfRows('DistinctURLs');
	
for i=0 to $(noRows)-1

	let vURL = peek('PageOfResultsUrl',$(i),'DistinctURLs');
	
	trace 'About to request $(vURL)';
	
	call urlEncode(vURL);
	
	//
	// Note that at present the associated tables which Qlik generates the load script for then pointing the Wizard to the connector have been commented out.
	//
	
	//	collaborator_ids:
	//	LOAD collaborator_ids%Table,
	//	    %Key_tickets_CD118827DB0DA346    // Key to parent table: DATA/tickets
	//	FROM [$(vRoot)?table=JsonToXmlRaw&appID=&verb=GET&url=$(vURL)&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]  (XmlSimple, Table is [DATA/tickets/collaborator_ids]);
	//	
	//	tags:
	//	LOAD tags%Table,
	//	    %Key_tickets_CD118827DB0DA346    // Key to parent table: DATA/tickets
	//	FROM [$(vRoot)?table=JsonToXmlRaw&appID=&verb=GET&url=$(vURL)&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]  (XmlSimple, Table is [DATA/tickets/tags]);
	//	
	//	followup_ids:
	//	LOAD followup_ids%Table,
	//	    %Key_tickets_CD118827DB0DA346    // Key to parent table: DATA/tickets
	//	FROM [$(vRoot)?table=JsonToXmlRaw&appID=&verb=GET&url=$(vURL)&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]  (XmlSimple, Table is [DATA/tickets/followup_ids]);
	//	
	//	custom_fields:
	//	LOAD id,
	//	    value,
	//	    %Key_tickets_CD118827DB0DA346    // Key to parent table: DATA/tickets
	//	FROM [$(vRoot)?table=JsonToXmlRaw&appID=&verb=GET&url=$(vURL)&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]  (XmlSimple, Table is [DATA/tickets/custom_fields]);
	//	
	//	fields:
	//	LOAD id,
	//	    value,
	//	    %Key_tickets_CD118827DB0DA346    // Key to parent table: DATA/tickets
	//	FROM [$(vRoot)?table=JsonToXmlRaw&appID=&verb=GET&url=$(vURL)&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]  (XmlSimple, Table is [DATA/tickets/fields]);
	
	ZenDesk_Tickets:
	LOAD url,
	    id,
	    created_at,
	    updated_at,
	    subject,
	    raw_subject,
	    description,
	    status,
	    recipient,
	    requester_id,
	    submitter_id,
	    assignee_id,
	    organization_id,
	    group_id,
	    has_incidents,
	    brand_id,
	    [via/channel] as channel,
	    [via/source/rel] as rel,
	    [via/source/to/address] as [to/address],
	    [via/source/to/name] as [to/name],
	    [via/source/from/address] as [from/address],
	    [via/source/from/name] as [from/name],
	    [via/source/from/ticket_id] as ticket_id,
	    [via/source/from/subject] as [from/subject],
	    %Key_DATA_FA7EABD78875BA43,    // Key to parent table: DATA
	    %Key_tickets_CD118827DB0DA346    // Key for this table: DATA/tickets
	FROM [$(vRoot)?table=JsonToXmlRaw&appID=&verb=GET&url=$(vURL)&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]  (XmlSimple, Table is [DATA/tickets]);
	
	//	DATA:
	//	LOAD next_page,
	//	    previous_page,
	//	    count,
	//	    %Key_DATA_FA7EABD78875BA43    // Key for this table: DATA
	//	FROM [$(vRoot)?table=JsonToXmlRaw&appID=&verb=GET&url=$(vURL)&$(vCredentials)&cacheTimeInHours=$(vCacheTimeInHours)&appId=$(vQVSourceAppId)$(vLoadAccessToken)]  (XmlSimple, Table is [DATA]);

next

store ZenDesk_Tickets into QVDs\ZenDesk_Tickets.qvd (qvd);

//store tickets into ZenDesk_Tickets.csv (txt);
drop table ZenDesk_Tickets;

// Lets pretend the above is an app simply for generating QVD files which 
// we then load into another app, with some additional calculated fields.

ZenDesk_Tickets:
load
*,
month(date#(left(created_at, 10), 'YYYY-MM-DD')) & '/' & year(date#(left(created_at, 10), 'YYYY-MM-DD')) as MonthYear,
timestamp#(created_at, 'YYYY-MM-DDThh:mm:ssZ') as ZenDesk_Ticket_created_at_QVTimestamp,
time#(mid(created_at,12,  8), 'hh:mm:ss') as ZenDesk_Ticket_created_at_QVTime,
date#(left(created_at, 10), 'YYYY-MM-DD') as ZenDesk_Ticket_created_at_QVDate,
timestamp#(created_at, 'YYYY-MM-DDThh:mm:ssZ') as ZenDesk_Ticket_updated_at_QVTimestamp,
date#(left(created_at, 10), 'YYYY-MM-DD') as ZenDesk_Ticket_updated_at_QVDate,
time#(mid(created_at,12, 8), 'hh:mm:ss') as ZenDesk_Ticket_updated_at_QVTime
from QVDs\ZenDesk_Tickets.qvd (qvd);
///$tab Clean Up
let vUserName = '';
let vEncryptedAPIKey = '';
let vZenDeskDomain = '';
let vURL = '';
let vTicketsURLToUse = '';	
let vTicketsURL = '';
let call = '';
let vCredentials = '';
let vLoadAccessToken = '';